{{ if eq .Values.portalScope "cluster" }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-cr-for-{{ include "litmus-portal.fullname" . }}-server
  labels:
    app.kubernetes.io/component: argo-cr-for-{{ include "litmus-portal.name" . }}-server
    {{- include "litmus-portal.labels" . | nindent 4 }}
rules:
- apiGroups: [""]
  resources: [pods, pods/exec]
  verbs: [create, get, list, watch, update, patch, delete]
- apiGroups: [""]
  resources: [configmaps]
  verbs: [get, watch, list]
- apiGroups: [""]
  resources: [persistentvolumeclaims]
  verbs: [create, delete]
- apiGroups: [argoproj.io]
  resources: [workflows, workflows/finalizers]
  verbs: [get, list, watch, update, patch, delete, create]
- apiGroups: [argoproj.io]
  resources: [workflowtemplates, workflowtemplates/finalizers, clusterworkflowtemplates, clusterworkflowtemplates/finalizers]
  verbs: [get, list, watch]
- apiGroups: [""]
  resources: [serviceaccounts]
  verbs: [get, list]
- apiGroups: [argoproj.io]
  resources: [cronworkflows, cronworkflows/finalizers]
  verbs: [get, list, watch, update, patch, delete]
- apiGroups: [""]
  resources: [events]
  verbs: [create, patch]
- apiGroups: [policy]
  resources: [poddisruptionbudgets]
  verbs: [create, get, delete]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: litmus-cluster-scope-for-{{ include "litmus-portal.fullname" . }}-server
  labels:
    app.kubernetes.io/component: litmus-cluster-scope-for-{{ include "litmus-portal.fullname" . }}-server
    {{- include "litmus-portal.labels" . | nindent 4 }}
rules:
  - apiGroups: [""]
    resources: [replicationcontrollers, secrets]
    verbs: [get, list]
  - apiGroups: [apps.openshift.io]
    resources: [deploymentconfigs]
    verbs: [get, list]
  - apiGroups: [apps]
    resources: [deployments, daemonsets, replicasets, statefulsets]
    verbs: [get, list]
  - apiGroups: [batch]
    resources: [jobs]
    verbs: [get, list, deletecollection]
  - apiGroups: [argoproj.io]
    resources: [rollouts]
    verbs: [get, list]
  - apiGroups: [""]
    resources: [pods, configmaps, events, services]
    verbs: [get, create, update, patch, delete, list, watch, deletecollection]
  - apiGroups: [litmuschaos.io]
    resources: [chaosengines, chaosexperiments, chaosresults]
    verbs: [get, create, update, patch, delete, list, watch, deletecollection]
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [list, get]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: litmus-admin-cr-for-{{ include "litmus-portal.fullname" . }}-server
  labels:
    app.kubernetes.io/component: litmus-admin-cr-for-{{ include "litmus-portal.name" . }}-server
    {{- include "litmus-portal.labels" . | nindent 4 }}
rules:
  # ***************************************************************************************
  # Permissions needed for preparing and monitor the chaos resources by chaos-runner
  # ***************************************************************************************

  # The chaos operator watches the chaosengine resource and orchestartes the chaos experiment..
  ## .. by creating the chaos-runner

  # for creating and monitoring the chaos-runner pods
- apiGroups: [""]
  resources: [pods,events]
  verbs: [create, delete, get, list, patch, update, deletecollection]

  # for fetching configmaps and secrets to inject into chaos-runner pod (if specified)
- apiGroups: [""]
  resources: [secrets, configmaps]
  verbs: [get, list]

  # for tracking & getting logs of the pods created by chaos-runner to implement individual steps in the runner
- apiGroups: [""]
  resources: [pods/log]
  verbs: [get, list, watch]  

  # for configuring and monitor the experiment job by chaos-runner pod
- apiGroups: [batch]
  resources: [jobs]
  verbs: [create, list, get, delete, deletecollection]

  # ********************************************************************
  # Permissions needed for creation and discovery of chaos experiments 
  # ********************************************************************

  # The helper pods are created by experiment to perform the actual chaos injection ...
  # ... for a period of chaos duration

  # for creating and deleting the helper or target app pod and events by experiment
- apiGroups: [""]
  resources: [pods]
  verbs: [create, delete, deletecollection]

  # for creating and monitoring the events for chaos operations
- apiGroups: [""]
  resources: [events]
  verbs: [create, delete, get, list, patch, update, deletecollection]

  # for monitoring the helper and target app pod
- apiGroups: [""]
  resources: [pods]
  verbs: [get, list, patch, update]

  # for creating and managing to execute comands inside target container
- apiGroups: [""]
  resources: [pods/exec, pods/eviction, replicationcontrollers]
  verbs: [get,list,create]

  # for tracking & getting logs of the pods created by experiment pod to implement individual steps in the experiment
- apiGroups: [""]
  resources: [pods/log]
  verbs: [get, list, watch]

  # for creating and monitoring liveness services or monitoring target app services during chaos injection
- apiGroups: [""]
  resources: [services]
  verbs: [create, delete, get, list, delete, deletecollection]

  # for checking the app parent resources as deployments or sts and are eligible chaos candidates  
- apiGroups: [apps]
  resources: [deployments, statefulsets]
  verbs: [list, get, patch, update, create, delete]

  # for checking the app parent resources as replicasets and are eligible chaos candidates  
- apiGroups: [apps]
  resources: [replicasets]
  verbs: [list, get]

  # for checking the app parent resources as deamonsets and are eligible chaos candidates  
- apiGroups: [apps]
  resources: [daemonsets]
  verbs: [list, get, delete]

  # for checking (openshift) app parent resources if they are eligible chaos candidates  
- apiGroups: [apps.openshift.io]
  resources: [deploymentconfigs]
  verbs: [list, get]

  # for checking (argo) app parent resources if they are eligible chaos candidates  
- apiGroups: [argoproj.io]
  resources: [rollouts]
  verbs: [list, get]

  # for creation, status polling and deletion of litmus chaos resources used within a chaos workflow
- apiGroups: [litmuschaos.io]
  resources: [chaosengines, chaosexperiments, chaosresults]
  verbs: [create, list, get, patch, update, delete]

  # for experiment to perform node status checks and other node level operations like taint, drain in the experiment.
- apiGroups: [""]
  resources: [nodes]
  verbs: [patch, get, list, update]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: chaos-cr-for-{{ include "litmus-portal.fullname" . }}-server
  labels:
    app.kubernetes.io/component: chaos-cr-for-{{ include "litmus-portal.name" . }}-server
    {{- include "litmus-portal.labels" . | nindent 4 }}
rules:
  # for managing the pods created by workflow controller to implement individual steps in the workflow
  - apiGroups: [""]
    resources: [pods, services, namespaces]
    verbs: [create, get, watch, patch, delete, list]

  # for tracking & getting logs of the pods created by workflow controller to implement individual steps in the workflow
  - apiGroups: [""]
    resources: [pods/log, secrets, configmaps]
    verbs: [get, watch, create, delete, patch]

  # for creation & deletion of application in predefined workflows
  - apiGroups: [apps]
    resources: [deployments, statefulsets]
    verbs: [get, watch, patch, create, delete]
    
  # for creation, status polling and deletion of litmus chaos resources used within a chaos workflow
  - apiGroups: [litmuschaos.io]
    resources: [chaosengines, chaosexperiments, chaosresults, chaosschedules]
    verbs: [create, list, get, patch, delete, watch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: subscriber-cr-for-{{ include "litmus-portal.fullname" . }}-server
  namespace: litmus
  labels:
    app.kubernetes.io/component: subscriber-cr-for-{{ include "litmus-portal.name" . }}-server
    {{- include "litmus-portal.labels" . | nindent 4 }}
rules:
- apiGroups: [""]
  resources: [configmaps]
  verbs: [get, create, delete, update]
- apiGroups: [""]
  resources: [pods/log]
  verbs: [get, list, watch]
- apiGroups: [""]
  resources: [pods, namespaces, nodes, services]
  verbs: [get, list, watch]
- apiGroups: [litmuschaos.io]
  resources: [chaosengines, chaosschedules, chaosresults]
  verbs: [get, list, create, delete, update, watch]
- apiGroups: [apps.openshift.io]
  resources: [deploymentconfigs]
  verbs: [get, list]
- apiGroups: [apps]
  resources: [deployments, daemonsets, replicasets, statefulsets]
  verbs: [get, list, delete]
- apiGroups: [argoproj.io]
  resources: [workflows, workflows/finalizers, workflowtemplates, workflowtemplates/finalizers, cronworkflows, cronworkflows/finalizers, clusterworkflowtemplates, clusterworkflowtemplates/finalizers, rollouts]
  verbs: [get, list, create, delete, update, watch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: event-tracker-cr-for-{{ include "litmus-portal.fullname" . }}-server
  labels:
    app.kubernetes.io/component: event-tracker-cr-for-{{ include "litmus-portal.name" . }}-server
    {{- include "litmus-portal.labels" . | nindent 4 }}
rules:
- apiGroups: [eventtracker.litmuschaos.io]
  resources: [eventtrackerpolicies]
  verbs: [create, delete, get, list, patch, update, watch]
- apiGroups: [eventtracker.litmuschaos.io]
  resources: [eventtrackerpolicies/status]
  verbs: [get, patch, update]
- apiGroups: ["", extensions, apps]
  resources: [deployments, daemonsets, statefulsets, pods, configmaps]
  verbs: [get, list, watch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: litmus-server-cr-for-{{ include "litmus-portal.fullname" . }}-server
  labels:
    app.kubernetes.io/component: litmus-server-cr-for-{{ include "litmus-portal.name" . }}-server
    {{- include "litmus-portal.labels" . | nindent 4 }}
rules:
  - apiGroups: [networking.k8s.io, extensions]
    resources: [ingresses]
    verbs: [get]
  - apiGroups: [""]
    resources: [services, nodes, pods/log]
    verbs: [get, watch]
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [create]
  - apiGroups: [apps]
    resources: [deployments]
    verbs: [create]
  - apiGroups: [""]
    resources: [configmaps]
    verbs: [get]
  - apiGroups: [""]
    resources: [serviceaccounts]
    verbs: [create]
  - apiGroups: [rbac.authorization.k8s.io]
    resources: [rolebindings, roles, clusterrolebindings, clusterroles]
    verbs: [create]
{{ end }}

# Default values for webservice.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
image:
  pullSecrets: []
  # pullPolicy: IfNotPresent
  # repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
  # tag: latest
init:
  image: {}
    # repository:
    # tag:
  resources:
    requests:
      cpu: 50m

# Tolerations for pod scheduling
tolerations: []

monitoring:
  # Monitoring IP whitelist
  ipWhitelist:
  - 0.0.0.0/0
  exporter:
    enabled: false
    port: 8083

# Shutdown settings
# Defines an interval to block healthcheck,
# but continue accepting application requests.
shutdown:
  blackoutSeconds: 10


annotations: {}

metrics:
  enabled: true
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/-/metrics"
service:
  type: ClusterIP
  externalPort: 8080
  internalPort: 8080
  workhorseExternalPort: 8181
  workhorseInternalPort: 8181
enabled: true
ingress:
  enabled: true
  proxyConnectTimeout: 15
  proxyReadTimeout: 600
  proxyBodySize: "512m"
  tls: {}
    # secretName:
    # enabled: true
  annotations: {}
workerProcesses: 2

unicorn:
  memory: # in MB units
    min: 1024
    max: 1280

puma:
  workerMaxMemory: 1024 # in MB units
  threads:
    min: 4
    max: 4
  disableWorkerKiller: false

hpa:
  targetAverageValue: 1

deployment:
  livenessProbe:
    initialDelaySeconds: 20
    periodSeconds: 60
    timeoutSeconds: 30
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 3

  # strategy is used to configure the desired upgrade approach and
  # configuration for the deployment. See the Kubernetes documentation
  # related to this subject.
  # https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy: {}

workhorse:
  sentryDSN: ""
  extraArgs: ""
  resources:
    requests:
      cpu: 100m
      memory: 100M
  # image: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
  livenessProbe:
    initialDelaySeconds: 20
    periodSeconds: 60
    timeoutSeconds: 30
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 3

psql: {}
  # port: 5432

global:
  # imagePullPolicy: IfNotPresent
  ingress:
    enabled: true
    annotations: {}
    tls: {}
      # secretName:
      # enabled: true
  hosts:
    domain: example.com
    hostSuffix:
    https: true
    gitlab: {}
      #name: gitlab.example.com
      #https: false
    registry: {}
      #name: registry.example.com
      #https: false
    minio: {}
      #name: minio.example.com
      #https: false
  psql: {}
    # host: '0.0.0.0'
    # port: '5432'
    # database: 'gitlabhq_production'
    # username: 'gitlab'
    # pool: 1
    # preparedStatements: false
    # password:
    #   secret: gitlab-postgres
    #   key: psql-password
    # ssl:
    #   secret: gitlab-ssl-secret
    #   clientKey: client-key.pem
    #   clientCertificate: client-cert.pem
    #   serverCA: server-ca.pem
  redis:
    # host: '0.0.0.0'
    password: {}
  gitaly:
    internal:
      names: ["default"]
    external: []
    authToken: {}
  minio:
    enabled:
    credentials: {}
  webservice: {}
    # workerTimeout: 60
  appConfig:
    incomingEmail:
      enabled: false
      address:
    serviceDeskEmail:
      enabled: false
      address:
    lfs:
      enabled: true
      proxy_download: true
      bucket:
      connection: {}
    artifacts:
      enabled: true
      proxy_download: true
      bucket:
      connection: {}
    uploads:
      enabled: true
      proxy_download: true
      bucket:
      connection: {}
    packages:
      enabled: true
      proxy_download: true
      bucket:
      connection: {}
    externalDiffs:
      when:
      proxy_download: true
      bucket:
      connection: {}
    terraformState:
      enabled: false
      bucket:
      connection: {}
    ldap:
      servers: {}
      # 'main' is the GitLab 'provider ID' of this LDAP server
      # main:
      #   label: 'LDAP'
      #   host: '_your_ldap_server'
      #   port: 636
      #   uid: 'sAMAccountName'
      #   bind_dn: '_the_full_dn_of_the_user_you_will_bind_with'
      #   password: '_the_password_of_the_bind_user'
      #   encryption: 'plain'
    omniauth:
      enabled: false
      autoSignInWithProvider:
      syncProfileFromProvider: []
      syncProfileAttributes: ['email']
      allowSingleSignOn: ['saml']
      blockAutoCreatedUsers: true
      autoLinkLdapUser: false
      autoLinkSamlUser: false
      externalProviders: []
      allowBypassTwoFactor: []
      providers: []
      # - secret: gitlab-google-oauth2
      #   key: provider
    sentry:
      enabled: false
      dsn:
      clientside_dsn:
      environment:

redis:
  password: {}
gitaly:
  # host: '0.0.0.0'
  # port: 8075
  # serviceName: 'gitaly'
  authToken: {}
  #   secret: gitaly-secret
  #   key: token
minio:
  serviceName: 'minio-svc'
  port: 9000
registry:
  enabled: true
  host:
  # port: 443
  api:
    protocol: http
    serviceName: registry
    port: 5000
  tokenIssuer: gitlab-issuer
extra: {}
  # google_analytics_id: '_your_tracking_id'
  # piwik_url: '_your_piwik_url'
  # piwik_site_id: '_your_piwik_site_id'
rack_attack:
  git_basic_auth:
    enabled: false
    # enabled: true
    # ip_whitelist: ["127.0.0.1"]
    # maxretry: 10
    # findtime: 60
    # bantime: 3600
trusted_proxies: []
resources:
  # limits:
  #  cpu: 1.5
  #  memory: 2G
  requests:
    cpu: 300m
    memory: 1.5G
maxUnavailable: 1
minReplicas: 2
maxReplicas: 10
helmTests:
  enabled: true

webServer: puma

## Allow to overwrite under which User and Group we're running.
securityContext:
  runAsUser: 1000
  fsGroup: 1000

## Enable deployment to use a serviceAccount
serviceAccount:
  enabled: false
  create: false
  annotations: {}
  ## Name to be used for serviceAccount, otherwise defaults to chart fullname
  # name: 

## Allow configuring pods' priorityClassName. This is used to control pod priority in case of eviction:
#  https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
priorityClassName: ""

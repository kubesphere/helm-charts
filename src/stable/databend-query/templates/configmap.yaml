apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "databend-query.fullname" . }}
  labels:
    {{- include "databend-query.labels" . | nindent 4 }}
data:
  config.toml: |-
    # databend query config
    [query]
      max_active_sessions = {{ .Values.config.query.maxActiveSessions | default 1024 }}
      wait_timeout_mills = {{ .Values.config.query.waitTimeoutMills | default 5000 }}

      tenant_id = {{ .Values.config.query.tenantId | default .Release.Name | quote }}
      cluster_id = {{ .Values.config.query.clusterId | quote }}

      management_mode = {{ .Values.config.query.managementMode }}
      jwt_key_file = {{ .Values.config.query.jwtKeyFile | quote }}

      {{- range .Values.config.query.users }}
      [[query.users]]
        name = {{ .name | quote }}
        auth_type = {{ .authType | quote }}
        {{- if eq .authType "sha256_password"}}
        auth_string = {{ .authString | quote }}
        {{- else if eq .authType "double_sha1_password"}}
        auth_string = {{ .authString | quote }}
        {{- end }}
      {{- end }}

      {{- range $field, $value := .Values.config.query.extra }}
      {{- if (kindIs "string" $value) }}
      {{ $field }} = {{ $value | quote }}
      {{- else }}
      {{ $field }} = {{ $value }}
      {{- end }}
      {{- end }}

    [log]
      [log.file]
        on = {{ .Values.config.log.file.enabled }}
        level = {{ .Values.config.log.file.level | default "INFO" | quote }}
        dir = "/var/log/databend"
      [log.stderr]
        on = {{ .Values.config.log.stderr.enabled }}
        level = {{ .Values.config.log.stderr.level | default "WARN" | quote }}

    [meta]
      endpoints = [{{ range .Values.config.meta.endpoints }}{{ . | quote }},{{ end }}]
      username = {{ .Values.config.meta.username | quote }}
      password = {{ .Values.config.meta.password | quote }}
      client_timeout_in_second = {{ .Values.config.meta.clientTimeoutInSecond | default 60 }}

    [storage]
      storage_type = {{ .Values.config.storage.type | quote }}

      {{- if eq .Values.config.storage.type "fs" }}
      [storage.fs]
        {{- range $field, $value := .Values.config.storage.fs }}
        {{- if (kindIs "string" $value) }}
        {{ $field }} = {{ $value | quote }}
        {{- else }}
        {{ $field }} = {{ $value }}
        {{- end }}
        {{- end }}
      {{- else if eq .Values.config.storage.type "s3"}}
      [storage.s3]
        {{- if .Values.minio.enabled }}
        bucket = {{ .Values.config.storage.s3.bucket | quote }}
        endpoint_url = "http://{{ printf "%s-%s.%s" .Release.Name "minio" .Release.Namespace }}:{{ .Values.minio.minioAPIPort }}"
        access_key_id = {{ .Values.minio.rootUser | quote }}
        secret_access_key = {{ .Values.minio.rootPassword | quote }}
        {{- else }}
        {{- range $field, $value := .Values.config.storage.s3 }}
        {{- if (kindIs "string" $value) }}
        {{ $field }} = {{ $value | quote }}
        {{- else }}
        {{ $field }} = {{ $value }}
        {{- end }}
        {{- end }}
        {{- end }}
      {{- else if eq .Values.config.storage.type "gcs"}}
        {{- range $field, $value := .Values.config.storage.gcs }}
        {{- if (kindIs "string" $value) }}
        {{ $field }} = {{ $value | quote }}
        {{- else }}
        {{ $field }} = {{ $value }}
        {{- end }}
        {{- end }}
      {{- else if eq .Values.config.storage.type "oss"}}
      [storage.oss]
        {{- range $field, $value := .Values.config.storage.oss }}
        {{- if (kindIs "string" $value) }}
        {{ $field }} = {{ $value | quote }}
        {{- else }}
        {{ $field }} = {{ $value }}
        {{- end }}
        {{- end }}
      {{- end }}

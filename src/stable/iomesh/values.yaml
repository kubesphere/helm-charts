global:
  # global variable registry to locate the images, It is convenient for users to specify private dockerhub
  registry: docker.io/

operator:
  # Operator replicas conunt.
  replicaCount: 1

  # Image config for IOMesh Operator
  image:
    # Default repository of the IOMesh Operator image.
    repository: iomesh/operator
    # The image tag. Default tag is `.Chart.AppVersion`
    tag: ""
    pullPolicy: IfNotPresent

  serviceAccount:
    # Create a ServiceAccount for IOMesh Operator. If create is false will use `default` ServiceAccount.
    create: true
    # Override ServiceAccount name
    name: ""

  # Pod schedule tolerantions for IOMesh Operator Pods.
  # More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  tolerations: []
  # - key: "node-role.kubernetes.io/master"
  #   operator: "Exists"
  #   effect: "NoSchedule"

  resources:
    limits:
      cpu: 500m
      memory: 500Mi

  metricsPort: 8080

  autoUpgradeCluster: true

  # ServiceMonitor config for Prometheus
  serviceMonitor:
    create: false
    namespace: "" # the namespace to create ServiceMonitor object
    labels: {}

    # RelabelConfigs to apply to samples before scraping.
    # More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
    relabelings: []

  prometheusRule:
    create: false
    namespace: "" # the namespace to create PrometheusRule object
    labels: {}

  kubeStateMetrics:
    create: false
    image:
      registry: registry.k8s.io
      repo: iomesh/kube-state-metrics
      tag: v2.7.0

    # RelabelConfigs to apply to samples before scraping.
    # More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
    relabelings: []

iomesh:
  # Whether to create IOMeshCluster object
  create: true

  # Hardware platform. Only when your k8s cluster uses hygon cpu, this field needs to be 
  # filled in as hygon_x86_64. In other cases this field is empty
  platform: ""

  # IOMesh software edition, support: enterprise/community. If left blank, community edition will be installed.
  edition: ""

  # Use All-Flash Mode or Hybrid-Flash Mode, in All-Flash mode will reject mounting `cacheWithJournal` and `rawCache` type.
  # And enable mount `dataStoreWithJournal`.
  diskDeploymentMode: "hybridFlash"

  cpuExclusiveOptions:
    # Cpu isolation and exclusive policy for IOMesh, support kubeletCpuManager/kernelCpuIsolation/noExclusive. 
    # The default value is kubeletCpuManager
    cpuExclusivePolicy: "kubeletCpuManager"

    # ExclusiveCpusets is used to specify the cpu list that the IOMesh Pod can exclusively use.
    # ExclusiveCpusets format should according http://man7.org/linux/man-pages/man7/cpuset.7.html#FORMATS,
    # for example: "1,3-5" meaning provide cpu 1,3,4,5
    #
    # Note: ExclusiveCpusets only takes effect when CpuExclusivePolicy is set to kernelCpuIsolation.
    # When CpuExclusivePolicy is set to kubeletCpuManager, cpuset is dynamically allocated by kubelet
    exclusiveCpusets: {}

  # ServiceMonitor config for Prometheus
  serviceMonitor:
    create: false
    namespace: "" # the namespace to create ServiceMonitor object
    labels: {}

  storageClass: hostpath

  reclaimPolicy:
    volume: Delete
    blockdevice: Delete

  zookeeper:
    image:
      repository: iomesh/zookeeper
      tag: "3.5.9"
      pullPolicy: IfNotPresent

    replicas: 3

    storageClass: hostpath

    reclaimPolicy: Delete

    storageSize: 20Gi

    podPolicy:
      # nodeSelector: {}
      # More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
      # affinity: {}
      # tolerations: []

  # Default config for IOMesh Meta Server
  meta:
    replicaCount: 3
    image:
      repository: iomesh/zbs-metad
      pullPolicy: IfNotPresent
      tag: ""
    # Pod schedule policy config.
    podPolicy:
      # nodeSelector: {}
      # More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
      # affinity: {}
      # tolerations: []

    serviceMonitor:
      # RelabelConfigs to apply to samples before scraping.
      # More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
      relabelings: []

  chunk:
    replicaCount: 3
    dataCIDR: ""
    accessCIDR: ""
    # mount device, more info: http://iomesh.com/docs/installation/setup-iomesh-storage
    deviceMap: {}
      # cacheWithJournal:
      #   selector:
      #     matchLabels:
      #       iomesh.com/bd-deviceType: disk
    image:
      repository: iomesh/zbs-chunkd
      pullPolicy: IfNotPresent
      tag: ""
    devicemanager:
      image:
        repository: iomesh/operator-devicemanager
        pullPolicy: IfNotPresent
        tag: ""
    extraEnvs: {}
    # Pod schedule policy config.
    podPolicy:
      # nodeSelector: {}
      # More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
      # affinity: {}
      # tolerations: []

    # ServiceMonitor config for Prometheus
    serviceMonitor:
      # RelabelConfigs to apply to samples before scraping.
      # More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
      relabelings: []

  redirector:
    iscsiVirtualIP: ""
    image:
      repository: iomesh/zbs-iscsi-redirectord
      pullPolicy: IfNotPresent
      tag: ""

    # Pod schedule policy config.
    podPolicy:
      # nodeSelector: {}
      # More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
      # affinity: {}
      # tolerations: []

  probe:
    image:
      repository: iomesh/operator-probe
      pullPolicy: IfNotPresent
      tag: ""

  toolbox:
      image:
        repository: iomesh/operator-toolbox
        pullPolicy: IfNotPresent
        tag: ""


openebs-ndm:
  enabled: true
  ndm:
    enabled: true
    image:
      repository: iomesh/node-disk-manager
    filters:
      enableOsDiskExcludeFilter: true
      osDiskExcludePaths: "/,/etc/hosts,/boot"
      enableVendorFilter: true
      excludeVendors: "ZBS"
      enablePathFilter: true
      includePaths: ""
      excludePaths: "/dev/fd0,/dev/sr0,/dev/ram,/dev/dm-,/dev/md,loop"
    probes:
      enableSeachest: true
      enableUdevProbe: true
      enableSmartProbe: true

  ndmOperator:
    enabled: true
    image:
      repository: iomesh/node-disk-operator

  ndmExporter:
    enabled: true
    image:
      repository: iomesh/node-disk-exporter

  helperPod:
    image:
      registry: ""
      repository: iomesh/linux-utils
      pullPolicy: IfNotPresent
      tag: 3.1.0
      
  featureGates:
    # https://github.com/openebs/node-disk-manager/pull/635
    PartitionTableUUID:
      enabled: true
      featureGateFlag: "PartitionTableUUID"
    APIService:
      enabled: true
      featureGateFlag: "APIService"
      address: "0.0.0.0:9115"


# Config for Hostpath Provisioner
hostpath-provisioner:
  image:
    repository: iomesh/hostpath-provisioner
  pvDir: /opt/iomesh/hostpath
  storageClass:
    create: true
    defaultClass: false
    name: hostpath

zookeeper-operator:
  image:
    repository: iomesh/zookeeper-operator
  hooks:
    image:
      repository: iomesh/k8s-kubectl
      tag: v1.23.2

csi-driver:
  fullnameOverride: "iomesh-csi-driver"
  # Create a default StorageClass with the fullname of the chart
  storageClass:
    # override the default name
    nameOverride: "iomesh-csi-driver"
    # default parameters for StorageClass
    parameters:
      csi.storage.k8s.io/fstype: "ext4"
      replicaFactor: "2"
      thinProvision: "true"
  volumeSnapshotClass:
    # override the default name
    nameOverride: "iomesh-csi-driver"
    # define VolumeSnapshot deletion policy
    deletionPolicy: Delete
  driver:
    image:
      repository: iomesh/csi-driver
      tag: ""
      pullPolicy: IfNotPresent
    # The unique csi driver name in a kubernetes cluster.
    nameOverride: "com.iomesh.csi-driver"
    # kubernetes-cluster-id
    clusterID: "iomesh"
    # EXTERNAL / HCI
    deploymentMode: "HCI"
    nvmf:
      # enable nvmf access protocol. The backend storage system must support the nvmf protocol to enable it
      enable: false
      nvmfAgentIntervalSecond: 90
      nvmfAgentConnectTimeoutSecond: 15
      nvmfAgentDisconnectTimeoutSecond: 15

    controller:
      # controller replicas
      replicas: 3
      # use hostNetwork to access IOMesh cluster
      hostNetwork: true
      # nodeSelector of csi-controller-plugin Pod
      nodeSelector: {}
      # affinity of csi-controller-plugin Pod
      affinity: {}
      driver:
        # driver ports(If hostNetwork is true, ports are host ports)
        ports:
          health: 9810
      resources:
        limits:
          cpu: 1
          memory: 1Gi

    node:
      # nodeSelector of csi-node-plugin Pod
      nodeSelector: {}
      # affinity of csi-node-plugin Pod
      affinity: {}
      driver:
        # iscsi config
        iscsi: {}
          # node.session.queue_depth: 128
          # node.session.cmds_max: 128
          # node.session.timeo.replacement_timeout: 120
        # host ports
        ports:
          health: 9811
          liveness: 9812
        # kubelet root directory
        kubeletRootDir: "/var/lib/kubelet"
      resources:
        limits:
          cpu: 500m
          memory: 500Mi

  prepareCSI:
    # Whether to deploy prepare-csi
    enabled: true
    # Image config for prepare-csi
    image:
      # Default repository of the prepare-csi image.
      repository: iomesh/prepare-csi
      # The image tag. Default tag is `.Chart.AppVersion`
      tag: ""

blockdevice-monitor:
  podMonitor:
    create: false
    namespace: ""
    labels: {}

  prometheusRule:
    create: false
    namespace: ""
    labels: {}

  # blockdevice-monitor blockdevicemonitor configuration
  blockdevicemonitor:
    image:
      repository: iomesh/blockdevice-monitor
      pullPolicy: IfNotPresent 
      tag: ""
    metrics:
      portName: http-metrics
      port: 8443
    podMonitor:
      # RelabelConfigs to apply to samples before scraping.
      # More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
      relabelings: []
    resources:
      limits:
        memory: 500Mi
    # nodeSelector of Pod
    nodeSelector: {}
    # affinity of Pod
    affinity: {}
    # tolerations of Pod
    tolerations: []
    # - key: "node-role.kubernetes.io/master"
    #   operator: "Exists"
    #   effect: "NoSchedule"

  # blockdevice-monitor prober configuration
  prober:
    image:
      repository: iomesh/blockdevice-monitor-prober
      pullPolicy: IfNotPresent 
      tag: ""
    iostat:
      enable: true
      loopIntervalSec: 15
      samplingWinSize: 6
      thresholdSSDLatencyMS: 500
      thresholdSSDIOPS: 5000
      thresholdSSDTotalBandwidth: 314572800
      thresholdHDDLatencyMS: 3000
      thresholdHDDIOPS: 50
      thresholdHDDTotalBandwidth: 104857600
    smart:
      enable: true
      loopIntervalSec: 21600
    zbsDeviceHealth:
      loopIntervalSec: 10 
      enable: true
      chunk:
        rpc:
          ip: 127.0.0.1
          port: 10200
    resources:
      limits:
        memory: 500Mi
    metrics:
      portName: http-metrics
      port: 8443
      path: /metrics
    podMonitor:
      # RelabelConfigs to apply to samples before scraping.
      # More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
      relabelings: []

iomesh-localpv-manager:
  enabled: true
  openebs-ndm:
    enabled: false

deck:
  image:
    repository: iomesh/deck
  prometheus:
    address: prometheus-operated.monitoring.svc.cluster.local:9090
    createNetworkPolicy: false
    namespace: "monitoring"
    matchLabels:
      app.kubernetes.io/name: prometheus
  alertmanager:
    address: alertmanager-operated.monitoring.svc.cluster.local:9093
    createNetworkPolicy: false
    namespace: "monitoring"
    matchLabels:
      app.kubernetes.io/name: alertmanager

deck-plugin-iomesh:
  image:
    repository: iomesh/deck-plugin-iomesh

{{- if .Values.webhook.enabled }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}-webhook
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: {{ template "common.names.fullname" . }}-webhook
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.webhook.replicaCount }}
  {{- if .Values.webhook.updateStrategy }}
  strategy: {{- toYaml .Values.webhook.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ template "common.names.fullname" . }}-webhook
  template:
    metadata:
      {{- if .Values.webhook.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.webhook.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: {{ template "common.names.fullname" . }}-webhook
        {{- if .Values.webhook.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.webhook.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "vsphere-csi.webhook.serviceAccountName" . }}
      {{- include "vsphere-csi.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.webhook.dnsPolicy }}
      dnsPolicy: {{- include "common.tplvalues.render" (dict "value" .Values.webhook.dnsPolicy "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.webhook.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.webhook.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.webhook.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.webhook.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.webhook.podAffinityPreset  "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.webhook.podAntiAffinityPreset  "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.webhook.nodeAffinityPreset.type "key" .Values.webhook.nodeAffinityPreset.key "values" .Values.webhook.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.webhook.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.webhook.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.webhook.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.webhook.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.webhook.priorityClassName }}
      priorityClassName: {{ .Values.webhook.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.webhook.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.webhook.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.webhook.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.webhook.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: vsphere-csi-webhook
          image: {{ template "vsphere-csi.webhook.image" . }}
          imagePullPolicy: {{ .Values.webhook.image.pullPolicy }}
          {{- if .Values.webhook.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.webhook.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.webhook.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.webhook.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.webhook.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.webhook.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.webhook.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.webhook.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: WEBHOOK_CONFIG_PATH
              value: "/run/secrets/tls/webhook.config"
            - name: LOGGER_LEVEL
              value: {{ include "common.tplvalues.render" (dict "value" .Values.global.logLevel "context" $) }}
            - name: CSI_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- if .Values.webhook.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.webhook.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.webhook.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.webhook.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.webhook.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.webhook.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.webhook.resources }}
          resources: {{- toYaml .Values.webhook.resources | nindent 12 }}
          {{- end }}
          {{- if .Values.webhook.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.webhook.livenessProbe "enabled") "context" $) | nindent 12 }}
          {{- else if .Values.webhook.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.webhook.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.webhook.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.webhook.readinessProbe "enabled") "context" $) | nindent 12 }}
          {{- else if .Values.webhook.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.webhook.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}
          #ports:
          volumeMounts:
            - mountPath: /run/secrets/tls/
              name: webhook-certs
              readOnly: true
          {{- if .Values.webhook.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.webhook.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.webhook.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.webhook.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: socket-dir
          emptyDir: {}
        - name: webhook-certs
          secret:
            secretName: {{ template "common.names.fullname" . }}-webhook-certs
        {{- if .Values.webhook.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.webhook.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
{{- end }}

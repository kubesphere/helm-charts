apiVersion: batch/v1
kind: Job
metadata:
  name: alerting-db-init-job
  annotations:
    "helm.sh/hook-weight": "6"
  namespace: kubesphere-alerting-system
  labels:
    app: alerting
    job: alerting-db-init
    version: v0.1.0
spec:
  backoffLimit: 6
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        app: alerting
        job: alerting-db-init
        version: v0.1.0
      name: alerting-db-init
    spec:
      initContainers:
      - name: wait-mysql
        image: "{{ .Values.busyboxImage.repository }}:{{ .Values.busyboxImage.tag }}"
        imagePullPolicy: "{{ .Values.busyboxImage.pullPolicy }}"
        command: ['sh', '-c', 'until nc -z {{ .Values.dbHost }} {{ .Values.dbPort }}; do echo "waiting for mysql"; sleep 2; done;']
      containers:
      - command: ["/flyway/sql/ddl/ddl_init.sh", "-h{{ .Values.dbHost }}", "-uroot", "--connect-timeout=5"]
        env:
        - name: PASSWORD
          value: "password"
        image: "{{ .Values.dbinitImage.repository }}:{{ .Values.dbinitImage.tag }}"
        imagePullPolicy: "{{ .Values.dbinitImage.pullPolicy }}"
        name: alerting-db-init
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: batch/v1
kind: Job
metadata:
  name: alerting-db-ctrl-job
  annotations:
    "helm.sh/hook-weight": "6"
  namespace: kubesphere-alerting-system
  labels:
    app: alerting
    job: alerting-db-ctrl
    version: v0.1.0
spec:
  backoffLimit: 6
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        app: alerting
        job: alerting-db-ctrl
        version: v0.1.0
      name: alerting-db-ctrl
    spec:
      initContainers:
      - name: wait-mysql
        image: "{{ .Values.busyboxImage.repository }}:{{ .Values.busyboxImage.tag }}"
        imagePullPolicy: "{{ .Values.busyboxImage.pullPolicy }}"
        command: ['sh', '-c', 'until nc -z {{ .Values.dbHost }} {{ .Values.dbPort }}; do echo "waiting for mysql"; sleep 2; done;']
      containers:
      - command: ["flyway", "-X", "-url=jdbc:mysql://{{ .Values.dbHost }}/alert", "-user=root", "-validateOnMigrate=false", "-locations=filesystem:/flyway/sql/alert", "migrate"]
        env:
        - name: FLYWAY_PASSWORD
          value: "password"
        image: "{{ .Values.dbinitImage.repository }}:{{ .Values.dbinitImage.tag }}"
        imagePullPolicy: "{{ .Values.dbinitImage.pullPolicy }}"
        name: alerting-db-ctrl
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
## @param global.imageRegistry Global Docker image registry
## @param global.tag Global Docker image tag
global:
  imageRegistry: registry.cn-beijing.aliyuncs.com
  tag: v4.1.0-beta.0
  imagePullSecrets: []

## @param nameOverride String to partially override common.names.fullname
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}

## Role represents the role of the current cluster,
## and it can have one of two values: "host" or "member".
## Priority: specified in values > get from kubesphere-config > default role (host)
role: ""

portal:
  ## The IP address or hostname to access ks-console service.
  ## DO NOT use IP address if ingress is enabled.
  hostname: "ks-console.kubesphere-system.svc"
  http:
    port: 30880
#  https:
#    port: 30443

s3:
#  If endpoint is empty, disable s3 storage
  endpoint: ""
  region: "us-east-1"
  disableSSL: true
  forcePathStyle: true
  accessKeyID: "admin"
  secretAccessKey: "admin"
  bucket: "uploads"

authentication:
  authenticateRateLimiterMaxTries: 10
  authenticationRateLimiterDuration: 10m0s
  loginHistoryRetentionPeriod: 168h
  enableMultiLogin: true
  adminPassword: ""
  issuer:
    maximumClockSkew: 10s
    # Jwt Secret is required by ks-apiserver, a random string would be generated if it's empty
    # Priority: specified in values > get from kubesphere-config > default jwtSecret (a random string)
    jwtSecret: ""
    accessTokenMaxAge: 2h
    accessTokenInactivityTimeout: 30m

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  name: "kubesphere"

tolerations:
  - key: node-role.kubernetes.io/master
    effect: NoSchedule
  - key: CriticalAddonsOnly
    operator: Exists
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 60
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 60

affinity: {}

nodeSelector: {}

## enable tls communication between all components
internalTLS: false

apiserver:
  image:
    registry: ""
    repository: kse/ks-apiserver
    tag: ""
    digest: ""
    pullPolicy: Always
    ## Optionally, specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g.:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## @param containerPorts [array] List of container ports to enable in the ks-apiserver container
  ##
  containerPorts:
    - protocol: TCP
      containerPort: 9090
  nodePort: 30881
  ## @param resources.limits The resource limits for the ks-apiserver containers
  ## @param resources.requests The requested resources for the ks-apiserver containers
  ##
  resources:
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 20m
      memory: 100Mi
  ## @param command Override default container command (useful when using custom images)
  ##
  command:
    - ks-apiserver
    - --logtostderr=true
  ## @param extraEnvVars Array with extra environment variables to add to ks-apiserver
  ## e.g.:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param extraVolumeMounts Optionally specify an extra list of additional volumeMounts for the ks-apiserver container(s)
  ##
  extraVolumeMounts: []
  ## @param extraVolumes Optionally specify an extra list of additional volumes for the ks-apiserver pod(s)
  ##
  extraVolumes: []

console:
  image:
    registry: ""
    repository: kse/ks-console
    tag: ""
    digest: ""
    pullPolicy: Always
    ## Optionally, specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g.:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## @param containerPorts [array] List of container ports to enable in the ks-console container
  ##
  containerPorts: []
  nodePort: 30880
  ## @param resources.limits The resource limits for the ks-console containers
  ## @param resources.requests The requested resources for the ks-console containers
  ##
  resources:
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 20m
      memory: 100Mi
  ## @param command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param extraEnvVars Array with extra environment variables to add to ks-console
  ##
  extraEnvVars: []
  ## @param extraVolumeMounts Optionally specify an extra list of additional volumeMounts for the ks-console container(s)
  ##
  extraVolumeMounts: []
  ## @param extraVolumes Optionally specify an extra list of additional volumes for the ks-console pod(s)
  ##
  extraVolumes: []

controller:
  image:
    registry: ""
    repository: kse/ks-controller-manager
    tag: ""
    digest: ""
    pullPolicy: Always
    ## Optionally, specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g.:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## @param containerPorts [array] List of container ports to enable in the ks-controller-manager container
  ##
  containerPorts:
    - containerPort: 8080
      protocol: TCP
    - containerPort: 8443
      protocol: TCP
  ## @param resources.limits The resource limits for the ks-controller-manager containers
  ## @param resources.requests The requested resources for the ks-controller-manager containers
  ##
  resources:
    limits:
      cpu: 1
      memory: 1000Mi
    requests:
      cpu: 30m
      memory: 50Mi
  ## @param command Override default container command (useful when using custom images)
  ##
  command:
    - controller-manager
    - --logtostderr=true
    - --leader-elect=true
    - --controllers=*
  ## @param extraEnvVars Array with extra environment variables to add to ks-controller-manager
  ##
  extraEnvVars: []
  ## @param extraVolumeMounts Optionally specify an extra list of additional volumeMounts for the ks-controller-manager container(s)
  ##
  extraVolumeMounts: []
  ## @param extraVolumes Optionally specify an extra list of additional volumes for the ks-controller-manager pod(s)
  ##
  extraVolumes: []

agent:
  replicaCount: 1

helm:
  image:
    registry: ""
    repository: kubesphereio/helm
    tag: "v3.12.1"
    pullPolicy: IfNotPresent

composedApp:
  # Selector to filter k8s applications to reconcile
  appSelector: ""

ha:
  enabled: false
#  cache:
#    type: redis
#    options:
#      host: ""
#      port: 6379
#      password: ""
#      db: 0

redis:
  replicaCount: 1
  image:
    registry: ""
    repository: redis
    digest: ""
    tag: "5.0.14-alpine"
    pullPolicy: IfNotPresent
  pvc:
    enabled: true
    size: 10Gi

kubectl:
  image:
    registry: ""
    repository: kubesphereio/kubectl
    tag: "v1.27.4"
    pullPolicy: IfNotPresent

ingress:
  # If set to false, ingress will not be created
  # Defaults to true
  # options: true, false
  enabled: false

  # options: traefik, nginx
  ingressClassName: ""
  # backend port number
  tls:
    enabled: true
    # options: generation, importation, letsEncrypt
    source: generation
    secretName: kubesphere-tls-certs

letsEncrypt:
  # email: none@example.com
  environment: production

certmanager:
  duration: 2160h
  renewBefore: 360h

nodeShell:
  image:
    registry: "docker.io"
    repository: alpine
    tag: "3.18.4"
    pullPolicy: IfNotPresent

cloud:
  enabled: true
  ## kubesphere.cloud clouddev.kubesphere.io or custom
  env: "kubesphere.cloud"
  customEnv: {}
#    url: https://kubesphere.cloud
#    subscription:
#      syncPeriod: 60m
#    repository:
#      url: https://app.kubesphere.cloud
#      repoName: marketplace
#      syncPeriod: 60m

extension:
  imageRegistry: ""
  nodeSelector: {}

upgrade:
  disabled: true
  image:
    registry: ""
    repository: kse/ks-upgrade
    tag: "latest"
    pullPolicy: IfNotPresent
  storage:
    s3:
      endpoint: ""
      bucket: ""
      region: ""
      disableSSL: true
      access_key_id: ""
      secret_access_key: ""
    local:
      path: /tmp/ks-upgrade
  persistenceVolume:
    name: ks-upgrade
    storageClassName: ""
    accessMode: ReadWriteOnce
    size: 5Gi
  jobs:
    network:
      disabled: false
      priority: 100
      extensionRef:
        name: "network"
        version: "1.0.0"
        namespace: "extension-network"
        configMap: "network-extension-1.0.0-chart"
        configMapKey: "charts.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: Multicluster
        clusterScheduling:
          placement:
            clusterSelector:
              matchLabels:
                kubesphere.io/managed: "true"
      dynamicOptions: {
        "rerun": "false"
      }
    iam:
      disabled: false
      priority: 100
      extensionRef:
        name: ""
        version: ""
        namespace: ""
        configMap: ""
        configMapKey: ""
        configMapNamespace: ""
        chartsPath: ""
        config: ""
        installationMode: HostOnly
        # installationMode: Multicluster
        clusterScheduling:
          placement:
            clusters:
              - host
            clusterSelector:
              matchLabels:
                node-role.kubernetes.io/master: ""
              matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
          overrides:
            k: v
      dynamicOptions: {}
    devops:
      disabled: false
      priority: 100
      extensionRef:
        version: "1.1.0"
        installationMode: Multicluster
        clusterScheduling:
          placement:
            clusters:
              - host
        config: |
          global:
            image:
              registry:
              pullSecrets: []
          agent:
            jenkins:
              securityRealm:
                openIdConnect:
                  # The kubesphere-core api used for jenkins OIDC
                  # If want to access to jenkinsUI, the kubesphereCoreApi must be specified and browser-accessible
                  # Modifying this configuration will take effect during installation
                  # If you wish for changes to take effect after installation, you need to update the jenkins-casc-config ConfigMap，copy the securityRealm configuration from jenkins.yaml to jenkins_user.yaml, save, and wait for approximately 70 seconds for the changes to take effect.
                  kubesphereCoreApi: "http://ks-apiserver.kubesphere-system.svc:30881"
      dynamicOptions: {}

    storage-utils:
      disabled: false
      priority: 100
      extensionRef:
        name: "storage-utils"
        version: "1.0.0"
        namespace: "extension-storage-utils"
        configMap: "extension-storage-utils-1.0.0-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        config: |
          backend:
            pvcAutoResizer:
              commandArgs:
                prometheusUrl: "http://prometheus-k8s.kubesphere-monitoring-system:9090"
        installationMode: Multicluster
        clusterScheduling:
          placement:
            clusterSelector:
              matchLabels:
                kubesphere.io/managed: "true"
      dynamicOptions: {
        "rerun": "false"
      }
    tower:
      disabled: false
      priority: 100
      extensionRef:
        name: "tower"
        version: "1.0.0"
        namespace: "extension-tower"
        configMap: "extension-tower-1.0.0-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: HostOnly
    kubefed:
      disabled: false
      priority: 100
      extensionRef:
        name: "kubefed"
        version: "1.0.0"
        namespace: "kube-federation-system"
        configMap: "extension-kubefed-1.0.0-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: HostOnly
    whizard-monitoring:
      disabled: false
      priority: 100
      extensionRef:
        name: "whizard-monitoring"
        version: "1.0.0"
        namespace: "extension-whizard-monitoring"
        configMap: "extension-whizard-monitoring-1.0.0-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: Multicluster
        clusterScheduling:
          placement:
            clusterSelector:
              matchLabels:
                kubesphere.io/managed: "true"
    springcloud:
      disabled: false
      priority: 100
      extensionRef:
        name: "springcloud"
        version: "0.1.0"
        namespace: "extension-springcloud"
        configMap: "extension-springcloud-0.1.0-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: Multicluster
    servicemesh:
      disabled: false
      priority: 100
      extensionRef:
        name: "servicemesh"
        version: "0.1.0"
        namespace: "extension-servicemesh"
        configMap: "extension-servicemesh-0.1.0-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: Multicluster
        config: |
          kiali:
            prometheus_url: http://prometheus-k8s.kubesphere-monitoring-system.svc:9090
          jaeger:
            storage:
              options:
                es:
                  server-urls: https://opensearch-cluster-master.kubesphere-logging-system.svc:9200
                  username: admin
                  password: admin
              #  secretName: jaeger-secret-opensearch
      dynamicOptions: {
        "rerun": "false"
      }
    application:
      disabled: false
      priority: 100
      extensionRef:
        name: "openpitrix"
        version: "0.0.1"
        namespace: "extension-openpitrix"
        configMap: "extension-openpitrix-0.0.1-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: HostOnly
        clusterScheduling:
          placement:
            clusters:
              - host
            clusterSelector:
              matchLabels:
                node-role.kubernetes.io/master: ""

    dmp:
      disabled: false
      priority: 100
      extensionRef:
        name: "dmp"
        version: "2.0.0"
        namespace: "extension-dmp"
        configMap: "extension-dmp-2.0.0-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: Multicluster
        clusterScheduling:
          placement:
            clusterSelector:
              matchLabels:
                kubesphere.io/managed: "true"
        config: |
          extension:
            frontend:
              image:
                repository: registry.cn-beijing.aliyuncs.com/kse/dmp-frontend
                tag: "2.0.0"
              resources:
                limits:
                  cpu: 200m
                  memory: 300Mi
                requests:
                  cpu: 200m
                  memory: 300Mi
          agent:
            dmp:
              image:
                repository: registry.cn-beijing.aliyuncs.com/kse/dmp
                tag: "2.0.0"
              resources:
                limits:
                  cpu: 200m
                  memory: 300Mi
                requests:
                  cpu: 200m
                  memory: 300Mi
    whizard-notification:
      disabled: false
      priority: 100
      extensionRef:
        name: "whizard-notification"
        version: "2.5.0"
        namespace: "kubesphere-logging-system"
        configMap: "extension-whizard-notification-2.5.0-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: HostOnly
        clusterScheduling:
          placement:
            clusters:
              - host
            clusterSelector:
              matchLabels:
                node-role.kubernetes.io/master: ""

    alerting:
      disabled: false
      priority: 200
      extensionRef:
        name: "whizard-alerting"
        version: "0.1.6"
        namespace: "extension-whizard-alerting"
        configMap: "extension-whizard-alerting-0.1.6-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: Multicluster
        clusterScheduling:
          placement:
            clusterSelector:
              matchLabels:
                kubesphere.io/managed: "true"
      dynamicOptions: {
        "rerun": "false"
      }
    kubeedge:
      disabled: false
      priority: 100
      extensionRef:
        name: "kubeedge"
        version: "1.13.1"
        namespace: "extension-kubeedge"
        configMap: "extension-kubeedge-1.13.1-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: Multicluster
        clusterScheduling:
          placement:
            clusterSelector:
              matchLabels:
                kubesphere.io/managed: "true"
      dynamicOptions: {
        "rerun": "false"
      }

    whizard-events:
      disabled: false
      priority: 100
      extensionRef:
        name: "whizard-events"
        version: "0.1.1"
        namespace: "kubesphere-logging-system"
        configMap: "extension-whizard-events-0.1.1-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: Multicluster

    gateway:
      disabled: false
      priority: 100
      extensionRef:
        name: "gateway"
        version: "0.1.0"
        namespace: "extension-gateway"
        configMap: "extension-gateway-0.1.0-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: Multicluster

    whizard-auditing:
      disabled: false
      priority: 100
      extensionRef:
        name: "whizard-auditing"
        version: "0.1.0"
        namespace: "kubesphere-logging-system"
        configMap: "extension-whizard-auditing-0.1.0-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: Multicluster

    whizard-logging:
      disabled: false
      priority: 100
      extensionRef:
        name: "whizard-logging"
        version: "0.1.0"
        namespace: "kubesphere-logging-system"
        configMap: "extension-whizard-logging-0.1.1-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: Multicluster

    vector:
      disabled: false
      priority: 101
      extensionRef:
        name: "vector"
        version: "0.30.0"
        namespace: "kubesphere-logging-system"
        configMap: "extension-vector-0.30.0-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: Multicluster

    opensearch:
      disabled: false
      priority: 100
      extensionRef:
        name: "opensearch"
        version: "2.11.1"
        namespace: "kubesphere-logging-system"
        configMap: "extension-opensearch-2.11.1-chart"
        configMapKey: "chart.tgz"
        configMapNamespace: "kubesphere-system"
        chartsPath: ""
        installationMode: Multicluster
        clusterScheduling:
          placement:
            clusterSelector:
              matchLabels:
                kubesphere.io/managed: "true"

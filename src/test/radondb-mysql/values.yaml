# Default values for radondb-mysql.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Specify an imagePullPolicy (Required)
## It's recommended to change this to 'Always' if the image tag is 'latest'
## ref: http://kubernetes.io/docs/user-guide/images/#updating-images
## Always IfNotPresent Never
imagePullPolicy: IfNotPresent

## String to partially override fullname template (will maintain the release name)
##
# nameOverride: ""
## String to fully override fullname template
##
# fullnameOverride: ""

# Please donot modify `replicaCount`, after the cluster is created. 
replicaCount: 3

busybox:
  image: busybox
  tag: 1.32

mysql:
  image: xenondb/percona
  tag: 5.7.33

  allowEmptyRootPassword: true
  # mysqlRootPassword:
  mysqlReplicationPassword: Repl_123

  mysqlUser: qingcloud
  mysqlPassword: Qing@123
  mysqlDatabase: qingcloud

  initTokudb: false
  ## Additionnal arguments that are passed to the MySQL container.
  ## For example use --default-authentication-plugin=mysql_native_password if older clients need to
  ## connect to a MySQL 8 instance.
  args: []

  configFiles:
    node.cnf: |
      [mysqld]
      default_storage_engine=InnoDB
      max_connections=65535

  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

  ## A string to add extra environment variables
  # extraEnvVars: |
  #   - name: EXTRA_VAR
  #     value: "extra"

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
#    requests:
#      memory: 256Mi
#      cpu: 100m
#    limits:
#      memory: 1Gi
#      cpu: 500m

xenon:
  image: xenondb/xenon
  tag: 1.1.5-alpha
  args: []

  ## A string to add extra environment variables
  # extraEnvVars: |
  #   - name: EXTRA_VAR
  #     value: "extra"

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

  resources: {}
#    requests:
#      memory: 128Mi
#      cpu: 50m
#    limits:
#      memory: 256Mi
#      cpu: 100m

metrics:
  enabled: false
  image: prom/mysqld-exporter
  tag: v0.12.1
  annotations: {}

  livenessProbe:
    initialDelaySeconds: 15
    timeoutSeconds: 5
  readinessProbe:
    initialDelaySeconds: 5
    timeoutSeconds: 1

  # Enable this if you're using https://github.com/coreos/prometheus-operator
  serviceMonitor:
    enabled: false
    ## Specify a namespace if needed
    # namespace: monitoring
    # fallback to the prometheus default unless specified
    interval: 10s
    # scrapeTimeout: 10s
    ## Defaults to what's used if you follow CoreOS [Prometheus Install Instructions](https://github.com/helm/charts/tree/master/stable/prometheus-operator#tldr)
    ## [Prometheus Selector Label](https://github.com/helm/charts/tree/master/stable/prometheus-operator#prometheus-operator-1)
    ## [Kube Prometheus Selector Label](https://github.com/helm/charts/tree/master/stable/prometheus-operator#exporters)
    # selector:
    #  prometheus: kube-prometheus

## When set to true will create sidecar to tail mysql slow log.
slowLogTail: true

resources: {}
#  limits:
#    cpu:     100m
#    memory:  128Mi
#  requests:
#    cpu:     10m
#    memory:  32Mi

## Configure the service
## ref: http://kubernetes.io/docs/user-guide/services/
service:
  annotations: {}
  ## Specify a service type, NodePort|ClusterIP|LoadBalancer
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types
  type: ClusterIP
  # clusterIP: None
  port: 3306
  # nodePort: 32000
  # loadBalancerIP:

rbac:
  # Specifies whether RBAC resources should be created
  create: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the serviceAccountName template
  name:

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, azure-disk on
  ##   Azure, standard on GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessModes:
  - ReadWriteOnce
  size: 10Gi
  annotations: {}
  reclaimPolicy: ""

## Set pod priorityClassName
# priorityClassName: {}

## Use an alternate scheduler, e.g. "stork".
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
# schedulerName:

# statefulset Annotations
statefulsetAnnotations: {}

# To be added to the database server pod(s)
podAnnotations: {}
podLabels: {}

nodeSelector: {}
hardAntiAffinity: true
additionalAffinities: {}
affinity: {}
